{"version":3,"sources":["component/Navbar.js","component/data/Picture.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","class","className","score","topScore","Picture","src","image","alt","onClick","handleClick","name","App","state","friends","clicked","map","e","indexOf","push","sort","Math","random","setState","alert","this","friend","img","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ooCAEe,SAASA,EAAOC,GAC7B,OACE,yBAAKC,MAAM,OACT,yBAAKC,UAAU,iBACf,wBAAIA,UAAU,8BACZ,wBAAIA,UAAU,YAAd,8BACA,wBAAIA,UAAU,YAAd,UACUF,EAAMG,MADhB,iBACqCH,EAAMI,YCPnD,IAWeC,EAXC,SAAAL,GACd,OACE,yBACEM,IAAKN,EAAMO,MACXC,IAAKR,EAAMQ,IACXN,UAAU,MACVO,QAAS,kBAAMT,EAAMU,YAAYV,EAAMW,U,OCiD9BC,E,2MAlDbC,MAAQ,CAAEC,QAASA,EAASX,MAAO,EAAGC,SAAU,EAAGW,QAAS,I,EAC5DL,YAAc,SAAAC,GACZ,IAKwB,IAJtB,EAAKE,MAAME,QACRC,KAAI,SAASC,GACZ,OAAOA,EAAEN,QAEVO,QAAQP,GACX,CACA,IAAII,EAAO,YAAO,EAAKF,MAAME,SAC7BA,EAAQI,KAAK,CAAER,SACf,IAAIG,EAAO,YAAO,EAAKD,MAAMC,SAC7BA,EAAQM,MAAK,kBAAMC,KAAKC,SAAW,MACnC,EAAKC,SAAS,CACZR,UACAD,UACAX,MAAO,EAAKU,MAAMV,MAAQ,SAG5BqB,MAAM,qB,wEAIA,IAAD,OACP,OACE,yBAAKtB,UAAU,OACb,kBAACH,EAAD,CAAQI,MAAOsB,KAAKZ,MAAMV,MAAOC,SAAUqB,KAAKZ,MAAMT,WACtD,4BAAQH,MAAM,UACZ,2CACA,wGAKF,yBAAKA,MAAM,WACRwB,KAAKZ,MAAMC,QAAQE,KAAI,SAAAU,GAAM,OAC5B,kBAAC,EAAD,CACEnB,MAAOmB,EAAOC,IACdnB,IAAKkB,EAAOf,KACZA,KAAMe,EAAOf,KACbI,QAASW,EAAOX,QAChBL,YAAa,EAAKA,uB,GA1CdkB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.adf26c70.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav class=\"nav\">\r\n      <div className=\"navbar-brand\"></div>\r\n      <ul className=\"nav justify-content-center\">\r\n        <li className=\"nav-item\">Click an image to begin!!!</li>\r\n        <li className=\"nav-item\">\r\n          score: {props.score} | Top Score: {props.topScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Picture = props => {\r\n  return (\r\n    <img\r\n      src={props.image}\r\n      alt={props.alt}\r\n      className=\"img\"\r\n      onClick={() => props.handleClick(props.name)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Picture;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./component/Navbar\";\r\nimport Picture from \"./component/data/Picture\";\r\nimport friends from \"./data.json\";\r\n\r\nclass App extends React.Component {\r\n  state = { friends: friends, score: 0, topScore: 0, clicked: [] };\r\n  handleClick = name => {\r\n    if (\r\n      this.state.clicked\r\n        .map(function(e) {\r\n          return e.name;\r\n        })\r\n        .indexOf(name) === -1\r\n    ) {\r\n      let clicked = [...this.state.clicked];\r\n      clicked.push({ name });\r\n      let friends = [...this.state.friends];\r\n      friends.sort(() => Math.random() - 0.5);\r\n      this.setState({\r\n        clicked,\r\n        friends,\r\n        score: this.state.score + 1\r\n      });\r\n    } else {\r\n      alert(\"its been clicked\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\r\n        <header class=\"header\">\r\n          <h1>Click Game!</h1>\r\n          <h2>\r\n            Click on an image to earn points, but don't click on any more than\r\n            once\r\n          </h2>\r\n        </header>\r\n        <div class=\"content\">\r\n          {this.state.friends.map(friend => (\r\n            <Picture\r\n              image={friend.img}\r\n              alt={friend.name}\r\n              name={friend.name}\r\n              clicked={friend.clicked}\r\n              handleClick={this.handleClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}